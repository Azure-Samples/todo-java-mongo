/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.microsoft.azure.simpletodo.api;

import com.microsoft.azure.simpletodo.model.TodoItem;
import com.microsoft.azure.simpletodo.model.TodoList;
import com.microsoft.azure.simpletodo.model.TodoState;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-24T15:32:56.631412+01:00[Europe/Paris]")
@Validated
@Api(value = "lists", description = "the lists API")
public interface ListsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /lists : Gets an array of Todo lists
     *
     * @param top The max number of items to returns in a result (optional)
     * @param skip The number of items to skip within the results (optional)
     * @return A Todo list result (status code 200)
     */

    @ApiOperation(value = "Gets an array of Todo lists", nickname = "listsGet", notes = "", response = TodoList.class, tags={ "Lists", })
    @ApiResponses(value = {

        @ApiResponse(code = 200, message = "A Todo list result", response = TodoList.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/lists",
        produces = { "application/json" }
    )
    default ResponseEntity<TodoList> listsGet(@ApiParam(value = "The max number of items to returns in a result") @Valid @RequestParam(value = "top", required = false) BigDecimal top

,@ApiParam(value = "The number of items to skip within the results") @Valid @RequestParam(value = "skip", required = false) BigDecimal skip

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /lists/{listId} : Deletes a Todo list by unique identifier
     *
     * @param listId The Todo list unique identifier (required)
     * @return Todo list deleted successfully (status code 204)
     *         or Todo list not found (status code 404)
     */

    @ApiOperation(value = "Deletes a Todo list by unique identifier", nickname = "listsListIdDelete", notes = "", tags={ "Lists", })
    @ApiResponses(value = {

        @ApiResponse(code = 204, message = "Todo list deleted successfully"),

        @ApiResponse(code = 404, message = "Todo list not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/lists/{listId}"
    )
    default ResponseEntity<Void> listsListIdDelete(@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("listId") String listId

) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /lists/{listId} : Gets a Todo list by unique identifier
     *
     * @param listId The Todo list unique identifier (required)
     * @return A Todo list result (status code 200)
     *         or Todo list not found (status code 404)
     */

    @ApiOperation(value = "Gets a Todo list by unique identifier", nickname = "listsListIdGet", notes = "", response = TodoList.class, tags={ "Lists", })
    @ApiResponses(value = {

        @ApiResponse(code = 200, message = "A Todo list result", response = TodoList.class),

        @ApiResponse(code = 404, message = "Todo list not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/lists/{listId}",
        produces = { "application/json" }
    )
    default ResponseEntity<TodoList> listsListIdGet(@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("listId") String listId

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /lists/{listId}/items : Gets Todo items within the specified list
     *
     * @param listId The Todo list unique identifier (required)
     * @param top The max number of items to returns in a result (optional)
     * @param skip The number of items to skip within the results (optional)
     * @return An array of Todo lists (status code 200)
     *         or Todo list not found (status code 404)
     */

    @ApiOperation(value = "Gets Todo items within the specified list", nickname = "listsListIdItemsGet", notes = "", response = TodoList.class, responseContainer = "List", tags={ "Items", })
    @ApiResponses(value = {

        @ApiResponse(code = 200, message = "An array of Todo lists", response = TodoList.class, responseContainer = "List"),

        @ApiResponse(code = 404, message = "Todo list not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/lists/{listId}/items",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TodoList>> listsListIdItemsGet(@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("listId") String listId

,@ApiParam(value = "The max number of items to returns in a result") @Valid @RequestParam(value = "top", required = false) BigDecimal top

,@ApiParam(value = "The number of items to skip within the results") @Valid @RequestParam(value = "skip", required = false) BigDecimal skip

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /lists/{listId}/items/{itemId} : Deletes a Todo item by unique identifier
     *
     * @param listId The Todo list unique identifier (required)
     * @param itemId The Todo list unique identifier (required)
     * @return A Todo item result (status code 204)
     *         or Todo list or item not found (status code 404)
     */

    @ApiOperation(value = "Deletes a Todo item by unique identifier", nickname = "listsListIdItemsItemIdDelete", notes = "", response = TodoItem.class, tags={ "Items", })
    @ApiResponses(value = {

        @ApiResponse(code = 204, message = "A Todo item result", response = TodoItem.class),

        @ApiResponse(code = 404, message = "Todo list or item not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/lists/{listId}/items/{itemId}",
        produces = { "application/json" }
    )
    default ResponseEntity<TodoItem> listsListIdItemsItemIdDelete(@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("listId") String listId

,@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("itemId") String itemId

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"listId\" : \"listId\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"completedDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /lists/{listId}/items/{itemId} : Gets a Todo item by unique identifier
     *
     * @param listId The Todo list unique identifier (required)
     * @param itemId The Todo list unique identifier (required)
     * @return A Todo item result (status code 200)
     *         or Todo list or item not found (status code 404)
     */

    @ApiOperation(value = "Gets a Todo item by unique identifier", nickname = "listsListIdItemsItemIdGet", notes = "", response = TodoItem.class, tags={ "Items", })
    @ApiResponses(value = {

        @ApiResponse(code = 200, message = "A Todo item result", response = TodoItem.class),

        @ApiResponse(code = 404, message = "Todo list or item not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/lists/{listId}/items/{itemId}",
        produces = { "application/json" }
    )
    default ResponseEntity<TodoItem> listsListIdItemsItemIdGet(@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("listId") String listId

,@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("itemId") String itemId

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"listId\" : \"listId\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"completedDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /lists/{listId}/items/{itemId} : Updates a Todo item by unique identifier
     *
     * @param listId The Todo list unique identifier (required)
     * @param itemId The Todo list unique identifier (required)
     * @param todoItem The Todo Item (optional)
     * @return A Todo item result (status code 200)
     *         or Todo item is invalid (status code 400)
     *         or Todo list or item not found (status code 404)
     */

    @ApiOperation(value = "Updates a Todo item by unique identifier", nickname = "listsListIdItemsItemIdPut", notes = "", response = TodoItem.class, tags={ "Items", })
    @ApiResponses(value = {

        @ApiResponse(code = 200, message = "A Todo item result", response = TodoItem.class),

        @ApiResponse(code = 400, message = "Todo item is invalid"),

        @ApiResponse(code = 404, message = "Todo list or item not found") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/lists/{listId}/items/{itemId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TodoItem> listsListIdItemsItemIdPut(@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("listId") String listId

,@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("itemId") String itemId

,

@ApiParam(value = "The Todo Item" )   @Valid @RequestBody(required = false) TodoItem todoItem) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"listId\" : \"listId\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"completedDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /lists/{listId}/items : Creates a new Todo item within a list
     *
     * @param listId The Todo list unique identifier (required)
     * @param todoItem The Todo Item (optional)
     * @return A Todo item result (status code 201)
     *         or Todo list not found (status code 404)
     */

    @ApiOperation(value = "Creates a new Todo item within a list", nickname = "listsListIdItemsPost", notes = "", response = TodoItem.class, tags={ "Items", })
    @ApiResponses(value = {

        @ApiResponse(code = 201, message = "A Todo item result", response = TodoItem.class),

        @ApiResponse(code = 404, message = "Todo list not found") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/lists/{listId}/items",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TodoItem> listsListIdItemsPost(@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("listId") String listId

,

@ApiParam(value = "The Todo Item" )   @Valid @RequestBody(required = false) TodoItem todoItem) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"listId\" : \"listId\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"completedDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /lists/{listId}/items/state/{state} : Gets a list of Todo items of a specific state
     *
     * @param listId The Todo list unique identifier (required)
     * @param state The Todo item state (required)
     * @param top The max number of items to returns in a result (optional)
     * @param skip The number of items to skip within the results (optional)
     * @return An array of Todo items (status code 200)
     *         or Todo list or item not found (status code 404)
     */

    @ApiOperation(value = "Gets a list of Todo items of a specific state", nickname = "listsListIdItemsStateStateGet", notes = "", response = TodoItem.class, responseContainer = "List", tags={ "Items", })
    @ApiResponses(value = {

        @ApiResponse(code = 200, message = "An array of Todo items", response = TodoItem.class, responseContainer = "List"),

        @ApiResponse(code = 404, message = "Todo list or item not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/lists/{listId}/items/state/{state}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TodoItem>> listsListIdItemsStateStateGet(@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("listId") String listId

,@ApiParam(value = "The Todo item state", required = true, allowableValues = "todo, inprogress, done") @PathVariable("state") TodoState state

,@ApiParam(value = "The max number of items to returns in a result") @Valid @RequestParam(value = "top", required = false) BigDecimal top

,@ApiParam(value = "The number of items to skip within the results") @Valid @RequestParam(value = "skip", required = false) BigDecimal skip

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"listId\" : \"listId\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"completedDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /lists/{listId}/items/state/{state} : Changes the state of the specified list items
     *
     * @param listId The Todo list unique identifier (required)
     * @param state The Todo item state (required)
     * @param requestBody  (optional)
     * @return Todo items updated (status code 204)
     *         or Update request is invalid (status code 400)
     */

    @ApiOperation(value = "Changes the state of the specified list items", nickname = "listsListIdItemsStateStatePut", notes = "", tags={ "Items", })
    @ApiResponses(value = {

        @ApiResponse(code = 204, message = "Todo items updated"),

        @ApiResponse(code = 400, message = "Update request is invalid") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/lists/{listId}/items/state/{state}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> listsListIdItemsStateStatePut(@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("listId") String listId

,@ApiParam(value = "The Todo item state", required = true, allowableValues = "todo, inprogress, done") @PathVariable("state") TodoState state

,

@ApiParam(value = "" )   @Valid @RequestBody(required = false) List<String> requestBody) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /lists/{listId} : Updates a Todo list by unique identifier
     *
     * @param listId The Todo list unique identifier (required)
     * @param todoList The Todo List (optional)
     * @return A Todo list result (status code 200)
     *         or Todo list is invalid (status code 400)
     */

    @ApiOperation(value = "Updates a Todo list by unique identifier", nickname = "listsListIdPut", notes = "", response = TodoList.class, tags={ "Lists", })
    @ApiResponses(value = {

        @ApiResponse(code = 200, message = "A Todo list result", response = TodoList.class),

        @ApiResponse(code = 400, message = "Todo list is invalid") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/lists/{listId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TodoList> listsListIdPut(@ApiParam(value = "The Todo list unique identifier", required = true) @PathVariable("listId") String listId

,

@ApiParam(value = "The Todo List" )   @Valid @RequestBody(required = false) TodoList todoList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /lists : Creates a new Todo list
     *
     * @param todoList The Todo List (optional)
     * @return A Todo list result (status code 201)
     *         or Invalid request schema (status code 400)
     */

    @ApiOperation(value = "Creates a new Todo list", nickname = "listsPost", notes = "", response = TodoList.class, tags={ "Lists", })
    @ApiResponses(value = {

        @ApiResponse(code = 201, message = "A Todo list result", response = TodoList.class),

        @ApiResponse(code = 400, message = "Invalid request schema") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/lists",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TodoList> listsPost(

@ApiParam(value = "The Todo List" )   @Valid @RequestBody(required = false) TodoList todoList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
